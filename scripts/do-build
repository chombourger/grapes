#!/bin/bash

# Locate ourselves
self=$(readlink -f "${BASH_SOURCE[0]}")
scriptsdir=$(dirname ${self})
topdir=$(cd ${scriptsdir}/.. && pwd)

# Read settings
source ${topdir}/grapes.conf

# Load common functions
source ${scriptsdir}/common-funcs

# Get project list
projects=$(echo ${projects})

build_package() {
   local p=${1}
   local t=packages/${p}
   local s=/opt/grapes/${t}/source

   # Remove previously generated files
   sudo rm -f ${t}/*.build ${t}/*.buildinfo ${t}/*.changes ${t}/*.deb	\
   && sudo rm -f ${t}/*.dsc ${t}/*.tar.xz; result=${?}
   [ ${result} -eq 0 ] || return ${result}


   # Install build dependencies
   sudo -H chroot ${builddir} sudo -H -u grapes -- bash -c "cd ${s} && yes|mk-build-deps -i -s sudo"; result=${?}
   [ ${result} -eq 0 ] || return ${result}

   # Build binary and source package
   sudo -H chroot ${builddir} sudo -H -u grapes -- bash -c "cd ${s} && debuild -uc -us"; result=${?}
   [ ${result} -eq 0 ] || return ${result}

   return ${result}
}

deploy_package() {
   local p=${1}
   local t=packages/${p}
   local s=${t}/source

   # Add binaries to repo
   reprepro -b /var/www/html/grapes includedeb ${release} ${t}/*.deb; result=${?}
   [ ${result} -eq 0 ] || return ${result}

   # Add sources to repo
   reprepro -b /var/www/html/grapes includedsc ${release} ${t}/*.dsc; result=${?}
   [ ${result} -eq 0 ] || return ${result}

   return ${result}
}

update_packages() {
   local result

   # Install created packages
   sudo -H chroot ${builddir} bash -c "apt-get -y update && apt-get -y upgrade"; result=${?}
   [ ${result} -eq 0 ] || return ${result}

   return ${result}
}

setup_chroot; result=${?}
if [ ${result} -eq 0 ]; then
   for p in ${projects}; do
      t=packages/${p}
      s=${t}/source

      # Build this package
      build_package ${p}; result=${?}
      [ ${result} -eq 0 ] || break

      # Deploy this package
      deploy_package ${p}; result=${?}
      [ ${result} -eq 0 ] || break

      # Update installed packages
      update_packages; result=${?}
      [ ${result} -eq 0 ] || break
   done
fi
rm_bind_mounts

exit ${result}

